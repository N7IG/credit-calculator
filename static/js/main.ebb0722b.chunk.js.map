{"version":3,"sources":["components/ConstForm/display-names.ts","components/ConstForm/ConstForm.tsx","components/PaymentForm/display-names.ts","components/PaymentForm/PaymentForm.tsx","components/TermForm/display-names.ts","components/TermForm/TermForm.tsx","components/AnnuityResult/display-names.ts","components/AnnuityResult/AnnuityResult.tsx","components/DiffResult/display-names.ts","components/DiffResult/DiffResult.tsx","containers/App/display-names.ts","containers/App/App.tsx","utils/calculateFromMonthlyPayment.util.ts","utils/calculateFromTerm.util.ts","utils/calculateDiffPayments.util.ts","serviceWorker.ts","index.tsx","models/index.ts","containers/App/App.module.scss","models/PaymentType.enum.ts","components/AnnuityResult/AnnuityResult.module.scss","components/DiffResult/DiffResult.module.scss"],"names":["DISPLAY_NAMES_RUS","ConstForm","handleSumChange","handleInterestRateChange","customInput","TextField","label","fullWidth","margin","variant","thousandSeparator","allowNegative","decimalScale","onValueChange","values","value","InputProps","endAdornment","InputAdornment","position","PaymentForm","handleMonthlyPaymentChange","TermForm","handleTermChange","handlePaymentTypeChange","RadioGroup","aria-label","defaultValue","PaymentType","Annuity","onChange","event","target","FormControlLabel","control","Radio","Differential","AnnuityResult","props","className","classes","resultsContainer","data","monthlyPaymentResult","displayType","style","fontWeight","monthNumberResult","overpayment","DiffResult","basicResultContainer","paymentAmount","reduce","acc","curr","amountOfPercentage","Accordion","AccordionSummary","expandIcon","aria-controls","id","AccordionDetails","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","row","index","key","scope","paymentPeriod","month","year","amountOfDebt","DISPLAY_MONTHS_NAMES_RUS","App","useState","sum","setSum","setMonthNumberResult","setOverpayment","interestRate","setInterestRate","monthlyPayment","setMonthlyPayment","term","setTerm","setMonthlyPaymentResult","paymentType","setPaymentType","diffPaymentTypeResult","setDiffPaymentResult","app","Number","choosableFormsContainer","choosableFormCard","Button","color","onClick","moPayment","percentageArray","detailed","THRESHOLD","i","descendPercArray","sort","a","b","startMonth","maxyrs","getYearPercent","el","findIndex","rec","yearPercent","percentPayment","debtPayment","Math","min","console","group","log","groupEnd","error","months","calculateFromMonthlyPayment","calculateFromTermResult","yearInterest","periods","n","coefficient","calculateFromTerm","round","calculatedDiffPaymentTypeResult","monthsToPay","percentage","monthsArray","finalResult","totalBasicDept","basicDebtPeymentPerMonth","currentDay","Date","currentMonth","getMonth","currentYear","getFullYear","percentagePayment","getDate","push","EPSILON","calculateDiffPayments","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.ebb0722b.chunk.js","sourcesContent":["export const DISPLAY_NAMES_RUS = {\r\n  SUM_INPUT_LABEL: \"Сумма кредита\",\r\n  PERCENT_INPUT_LABEL: \"Процентная ставка\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface ConstFormProps {\r\n  handleSumChange: Function;\r\n  handleInterestRateChange: Function;\r\n}\r\n\r\nexport const ConstForm: FunctionComponent<ConstFormProps> = ({\r\n  handleSumChange,\r\n  handleInterestRateChange,\r\n}) => (\r\n  <div>\r\n    <NumberFormat\r\n      customInput={TextField}\r\n      label={DISPLAY_NAMES_RUS.SUM_INPUT_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      thousandSeparator={\" \"}\r\n      allowNegative={false}\r\n      decimalScale={2}\r\n      onValueChange={(values) => {\r\n        const { value } = values;\r\n        handleSumChange(value);\r\n      }}\r\n    />\r\n    <NumberFormat\r\n      customInput={TextField}\r\n      label={DISPLAY_NAMES_RUS.PERCENT_INPUT_LABEL}\r\n      fullWidth\r\n      InputProps={{\r\n        endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n      }}\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      thousandSeparator={\" \"}\r\n      allowNegative={false}\r\n      decimalScale={2}\r\n      onValueChange={(values) => {\r\n        const { value } = values;\r\n        handleInterestRateChange(value);\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  MONTHLY_PAYMENT_LABEL: \"Ежемесячный платёж\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface PaymentFormProps {\r\n  handleMonthlyPaymentChange: Function;\r\n}\r\n\r\nexport const PaymentForm: FunctionComponent<PaymentFormProps> = ({\r\n  handleMonthlyPaymentChange,\r\n}) => (\r\n  <div>\r\n    <NumberFormat\r\n      customInput={TextField}\r\n      label={DISPLAY_NAMES_RUS.MONTHLY_PAYMENT_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      thousandSeparator={\" \"}\r\n      allowNegative={false}\r\n      decimalScale={2}\r\n      onValueChange={(values) => {\r\n        const { value } = values;\r\n        handleMonthlyPaymentChange(value);\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  TERM_LABEL: \"Срок кредитования\",\r\n  DIFF_RADIO: \"Дифференцированный платеж\",\r\n  ANNUITY_RADIO: \"Аннуитетный платеж\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\r\nimport { PaymentType } from \"../../models\";\r\n\r\ninterface TermFormProps {\r\n  handleTermChange: Function;\r\n  handlePaymentTypeChange: Function;\r\n}\r\n\r\nexport const TermForm: FunctionComponent<TermFormProps> = ({\r\n  handleTermChange,\r\n  handlePaymentTypeChange,\r\n}) => (\r\n  <div>\r\n    <NumberFormat\r\n      customInput={TextField}\r\n      label={DISPLAY_NAMES_RUS.TERM_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      thousandSeparator={\" \"}\r\n      allowNegative={false}\r\n      decimalScale={0}\r\n      onValueChange={(values) => {\r\n        const { value } = values;\r\n        handleTermChange(value);\r\n      }}\r\n    />\r\n    <RadioGroup\r\n      aria-label=\"payment_type\"\r\n      defaultValue={PaymentType.Annuity}\r\n      onChange={(event) => {\r\n        handlePaymentTypeChange(event.target.value);\r\n      }}\r\n    >\r\n      <FormControlLabel\r\n        value={PaymentType.Annuity}\r\n        control={<Radio />}\r\n        label={DISPLAY_NAMES_RUS.ANNUITY_RADIO}\r\n      />\r\n      <FormControlLabel\r\n        value={PaymentType.Differential}\r\n        control={<Radio />}\r\n        label={DISPLAY_NAMES_RUS.DIFF_RADIO}\r\n      />\r\n    </RadioGroup>\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  MONTHS: \"месяцев\",\r\n  MONTH_PAYMENT: \"Ежемесячный платёж\",\r\n  CALCULATED_PAYMENT_PERIOD: \"Срок выплат составит\",\r\n  CALCULATED_OVERPAYMENT: \"Переплата составит\",\r\n};\r\n","import React from \"react\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport classes from \"./AnnuityResult.module.scss\";\r\n\r\nimport { AnnuityDataPropsResult } from \"../../models/index\";\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\nexport function AnnuityResult(props: AnnuityDataPropsResult) {\r\n  return (\r\n    <div className={classes.resultsContainer}>\r\n      <div>\r\n        {DISPLAY_NAMES_RUS.MONTH_PAYMENT}:{\" \"}\r\n        <span>\r\n          <NumberFormat\r\n            value={props.data.monthlyPaymentResult}\r\n            thousandSeparator={\" \"}\r\n            decimalScale={2}\r\n            displayType={\"text\"}\r\n            style={{ fontWeight: \"bold\" }}\r\n          />\r\n        </span>\r\n      </div>\r\n      <div>\r\n        {DISPLAY_NAMES_RUS.CALCULATED_PAYMENT_PERIOD}:{\" \"}\r\n        <span>\r\n          <NumberFormat\r\n            value={props.data.monthNumberResult}\r\n            thousandSeparator={\" \"}\r\n            decimalScale={0}\r\n            displayType={\"text\"}\r\n            style={{ fontWeight: \"bold\" }}\r\n          />\r\n        </span>{\" \"}\r\n        {DISPLAY_NAMES_RUS.MONTHS}\r\n        <br />\r\n        {DISPLAY_NAMES_RUS.CALCULATED_OVERPAYMENT}:{\" \"}\r\n        <span>\r\n          <NumberFormat\r\n            value={props.data.overpayment}\r\n            thousandSeparator={\" \"}\r\n            decimalScale={2}\r\n            displayType={\"text\"}\r\n            style={{ fontWeight: \"bold\" }}\r\n          />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const DISPLAY_NAMES_RUS = {\r\n  ORDER_PAYMENT_NUMBER: \"№ Платежа\",\r\n  PEYMENT_FOR_PERIOD: \"Оплата за период\",\r\n  BASIC_DEBT_PERIOD_PAYMENT: \"Основной долг\",\r\n  PERCENTAGE_PERIOD_PAYMENT: \"Начисленные проценты\",\r\n  TOTAL_PERIOD_PAYMENT: \"Сумма платежа\",\r\n  FIRST_PAYMENT: \"Первый платеж\",\r\n  OVERPAYMENT: \"Переплата\",\r\n  DETAILS: \"Детализация платежей\",\r\n};\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport classes from \"./DiffResult.module.scss\";\r\nimport {\r\n  DiffTableResultContent,\r\n  DiffTableRawContent,\r\n} from \"../../models/DiffResult.model\";\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\nexport function DiffResult(props: DiffTableResultContent) {\r\n  return (\r\n    <div>\r\n      <div className={classes.basicResultContainer}>\r\n        <div>\r\n          {DISPLAY_NAMES_RUS.FIRST_PAYMENT}:{\" \"}\r\n          <span>\r\n            <NumberFormat\r\n              value={props.data[0].paymentAmount}\r\n              thousandSeparator={\" \"}\r\n              decimalScale={2}\r\n              displayType={\"text\"}\r\n              style={{ fontWeight: \"bold\" }}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div>\r\n          {DISPLAY_NAMES_RUS.OVERPAYMENT}:{\" \"}\r\n          <span>\r\n            <NumberFormat\r\n              value={props.data.reduce((acc, curr) => {\r\n                return acc + curr.amountOfPercentage;\r\n              }, 0)}\r\n              thousandSeparator={\" \"}\r\n              decimalScale={2}\r\n              displayType={\"text\"}\r\n              style={{ fontWeight: \"bold\" }}\r\n            />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <Accordion>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"payment-details\"\r\n          id=\"payment-details\"\r\n        >\r\n          <div>{DISPLAY_NAMES_RUS.DETAILS}</div>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <TableContainer component={Paper}>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.ORDER_PAYMENT_NUMBER}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.PEYMENT_FOR_PERIOD}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.BASIC_DEBT_PERIOD_PAYMENT}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.PERCENTAGE_PERIOD_PAYMENT}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.TOTAL_PERIOD_PAYMENT}</b>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {props.data.map((row: DiffTableRawContent, index: number) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {index + 1}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {row.paymentPeriod.month}, {row.paymentPeriod.year}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.amountOfDebt}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.amountOfPercentage}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.paymentAmount}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","export const DISPLAY_NAMES_RUS = {\r\n  APP_NAME: \"Кредитный калькулятор\",\r\n};\r\nexport const DISPLAY_MONTHS_NAMES_RUS = [\"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\"];\r\n","import round from \"lodash/round\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport {\r\n  ConstForm,\r\n  PaymentForm,\r\n  TermForm,\r\n  AnnuityResult,\r\n  DiffResult,\r\n} from \"../../components\";\r\nimport {\r\n  calculateFromMonthlyPayment,\r\n  calculateFromTerm,\r\n  calculateDiffPayments,\r\n} from \"../../utils\";\r\nimport { DISPLAY_NAMES_RUS, DISPLAY_MONTHS_NAMES_RUS } from \"./display-names\";\r\nimport classes from \"./App.module.scss\";\r\n\r\nimport { DiffTableRawContent, PaymentType } from \"../../models/index\";\r\n\r\nexport const App = () => {\r\n  const [sum, setSum] = useState<number>(0);\r\n  const [monthNumberResult, setMonthNumberResult] = useState<number>(0);\r\n  const [overpayment, setOverpayment] = useState<number>(0);\r\n  const [interestRate, setInterestRate] = useState<number>(0);\r\n  const [monthlyPayment, setMonthlyPayment] = useState<number>(0);\r\n  const [term, setTerm] = useState<number>(0);\r\n  const [monthlyPaymentResult, setMonthlyPaymentResult] = useState<number>(0);\r\n  const [paymentType, setPaymentType] = useState<PaymentType>(\r\n    PaymentType.Annuity\r\n  );\r\n  const [diffPaymentTypeResult, setDiffPaymentResult] = useState<\r\n    Array<DiffTableRawContent>\r\n  >([]);\r\n\r\n  const handleSumChange = (value: string) => {\r\n    setSum(Number(value));\r\n  };\r\n\r\n  const handleInterestRateChange = (value: string) => {\r\n    setInterestRate(Number(value));\r\n  };\r\n\r\n  const handleMonthlyPaymentChange = (value: string) => {\r\n    setMonthlyPayment(Number(value));\r\n  };\r\n\r\n  const handleTermChange = (value: string) => {\r\n    setTerm(Number(value));\r\n  };\r\n\r\n  const handlePaymentTypeChange = (value: PaymentType) => {\r\n    setPaymentType(value);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n      <header>{DISPLAY_NAMES_RUS.APP_NAME}</header>\r\n      <ConstForm\r\n        handleSumChange={handleSumChange}\r\n        handleInterestRateChange={handleInterestRateChange}\r\n      />\r\n      <div className={classes.choosableFormsContainer}>\r\n        <div className={classes.choosableFormCard}>\r\n          <TermForm\r\n            handleTermChange={handleTermChange}\r\n            handlePaymentTypeChange={handlePaymentTypeChange}\r\n          />\r\n        </div>\r\n        <div className={classes.choosableFormCard}>\r\n          <PaymentForm\r\n            handleMonthlyPaymentChange={handleMonthlyPaymentChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          if (paymentType === PaymentType.Annuity) {\r\n            const { months, overpayment } = calculateFromMonthlyPayment(\r\n              sum,\r\n              monthlyPayment,\r\n              [{ interestRate, startMonth: 1 }],\r\n              true\r\n            );\r\n\r\n            const calculateFromTermResult: number = calculateFromTerm(\r\n              sum,\r\n              interestRate,\r\n              term\r\n            );\r\n\r\n            setMonthNumberResult(months);\r\n            setOverpayment(round(overpayment, 2));\r\n            setMonthlyPaymentResult(round(calculateFromTermResult, 2));\r\n          } else {\r\n            const calculatedDiffPaymentTypeResult: Array<DiffTableRawContent> = calculateDiffPayments(\r\n              sum,\r\n              term,\r\n              interestRate,\r\n              DISPLAY_MONTHS_NAMES_RUS\r\n            );\r\n\r\n            setDiffPaymentResult(calculatedDiffPaymentTypeResult);\r\n          }\r\n        }}\r\n      >\r\n        Рассчитать\r\n      </Button>\r\n      {paymentType === PaymentType.Annuity ? (\r\n        <AnnuityResult\r\n          data={{\r\n            monthlyPaymentResult,\r\n            monthNumberResult,\r\n            overpayment,\r\n          }}\r\n        />\r\n      ) : diffPaymentTypeResult.length ? (\r\n        <DiffResult data={diffPaymentTypeResult} />\r\n      ) : (\r\n        \" \"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","export function calculateFromMonthlyPayment(\r\n  sum: number,\r\n  moPayment: number,\r\n  percentageArray: Array<{ interestRate: number; startMonth: number }>,\r\n  detailed: boolean = false\r\n): {\r\n  months: number;\r\n  overpayment: number;\r\n  error?: string;\r\n} {\r\n  const THRESHOLD: number = 1;\r\n  let i = 0;\r\n  let overpayment = 0;\r\n  let descendPercArray = percentageArray.sort(\r\n    (a, b) => b.startMonth - a.startMonth\r\n  );\r\n  const maxyrs = 200;\r\n\r\n  function getYearPercent(month: number) {\r\n    let index = descendPercArray\r\n      .map((el) => el.startMonth)\r\n      .findIndex((el) => el < month + 1);\r\n    return descendPercArray[index].interestRate;\r\n  }\r\n\r\n  function rec(sum: number) {\r\n    if (sum > 0 + THRESHOLD) {\r\n      i++;\r\n      let yearPercent = getYearPercent(i);\r\n      let percentPayment = (sum * yearPercent) / 12 / 100;\r\n      let debtPayment = Math.min(moPayment - percentPayment, sum);\r\n      overpayment += percentPayment;\r\n\r\n      if (detailed) {\r\n        console.group(`month ${i}:`);\r\n        console.log(\"year percent:\", yearPercent);\r\n        console.log(\"percentPayment:\", percentPayment);\r\n        console.log(\"debt payment:\", debtPayment);\r\n        console.log(\"sum left:\", sum - debtPayment);\r\n        console.groupEnd();\r\n      }\r\n\r\n      if (i < maxyrs * 12) {\r\n        rec(sum - debtPayment);\r\n      }\r\n    }\r\n  }\r\n  rec(sum);\r\n\r\n  return i >= maxyrs * 12\r\n    ? { error: \"stack overflow\", months: 0, overpayment: 0 }\r\n    : {\r\n        months: i,\r\n        overpayment,\r\n      };\r\n}\r\n","export function calculateFromTerm(\r\n  sum: number,\r\n  yearInterest: number,\r\n  periods: number\r\n): number {\r\n  const i = yearInterest / 12 / 100;\r\n  const n = periods;\r\n  const coefficient = (i * (1 + i) ** n) / ((i + 1) ** n - 1);\r\n\r\n  return yearInterest ? coefficient * sum : sum / periods;\r\n}\r\n","import { DiffTableRawContent } from \"../models/index\";\r\n\r\nexport function calculateDiffPayments(\r\n  sum: number,\r\n  monthsToPay: number,\r\n  percentage: number,\r\n  monthsArray: string[]\r\n): Array<DiffTableRawContent> {\r\n  const finalResult: Array<DiffTableRawContent> = [];\r\n  let totalBasicDept: number = sum;\r\n  const basicDebtPeymentPerMonth: number = sum / monthsToPay;\r\n  const currentDay: Date = new Date();\r\n  let currentMonth: number = currentDay.getMonth();\r\n  let currentYear: number = currentDay.getFullYear();\r\n\r\n  for (let i = 0; i < monthsToPay; i++) {\r\n    let daysInCurrentMonth = new Date(\r\n      currentYear,\r\n      currentMonth + 1,\r\n      0\r\n    ).getDate();\r\n    let currentMonthPercentageCoeff =\r\n      ((percentage / 100) * daysInCurrentMonth) / 365;\r\n    let percentagePayment = totalBasicDept * currentMonthPercentageCoeff;\r\n\r\n    totalBasicDept -= basicDebtPeymentPerMonth;\r\n\r\n    finalResult.push({\r\n      paymentPeriod: { month: monthsArray[currentMonth], year: currentYear },\r\n      paymentAmount:\r\n        Math.round(\r\n          (basicDebtPeymentPerMonth + percentagePayment + Number.EPSILON) * 100\r\n        ) / 100,\r\n      amountOfDebt:\r\n        Math.round((basicDebtPeymentPerMonth + Number.EPSILON) * 100) / 100,\r\n      amountOfPercentage:\r\n        Math.round((percentagePayment + Number.EPSILON) * 100) / 100,\r\n    });\r\n\r\n    currentMonth++;\r\n    if (currentMonth === 12) {\r\n      currentYear++;\r\n      currentMonth -= 12;\r\n    }\r\n  }\r\n\r\n  return finalResult;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./containers\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// <React.StrictMode></React.StrictMode>\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export * from \"./DiffResult.model\";\r\nexport * from \"./AnnuityResult.model\";\r\nexport * from \"./PaymentType.enum\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__7qkoG\",\"choosableFormsContainer\":\"App_choosableFormsContainer__1K0Pr\",\"resultsContainer\":\"App_resultsContainer__tqEXU\",\"choosableFormCard\":\"App_choosableFormCard__xieuc\"};","export enum PaymentType {\r\n  Annuity = \"annuity\",\r\n  Differential = \"differential\",\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsContainer\":\"AnnuityResult_resultsContainer__2WFg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"DiffResult_tableContainer__2Udeo\",\"basicResultContainer\":\"DiffResult_basicResultContainer__GGGDQ\"};"],"sourceRoot":""}