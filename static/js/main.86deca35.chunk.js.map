{"version":3,"sources":["containers/Main/Main.module.scss","components/ConstForm/display-names.ts","components/ConstForm/ConstForm.tsx","components/PaymentForm/display-names.ts","components/PaymentForm/PaymentForm.tsx","components/TermForm/display-names.ts","components/TermForm/TermForm.tsx","containers/Main/display-names.ts","containers/Main/Main.tsx","utils/calculateFromMonthlyPayment.util.ts","utils/calculateFromTerm.util.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DISPLAY_NAMES_RUS","ConstForm","handleSumChange","handleInterestRateChange","customInput","TextField","id","label","fullWidth","margin","variant","thousandSeparator","allowNegative","decimalScale","onValueChange","values","value","InputProps","endAdornment","InputAdornment","position","PaymentForm","handleMonthlyPaymentChange","TermForm","handleTermChange","RadioGroup","aria-label","name","FormControlLabel","control","Radio","Main","useState","sum","setSum","monthNumberResult","setMonthNumberResult","overpayment","setOverpayment","interestRate","setInterestRate","monthlyPayment","setMonthlyPayment","term","setTerm","monthlyPaymentResult","setMonthlyPaymentResult","className","classes","main","Number","choosableFormsContainer","choosableFormCard","Button","color","onClick","moPayment","percentageArray","detailed","i","descendPercArray","sort","a","b","startMonth","maxyrs","getYearPercent","month","index","map","el","findIndex","rec","yearPercent","percentPayment","console","groupCollapsed","log","groupEnd","error","months","calculateFromMonthlyPayment","calculateFromTermResult","yearInterest","periods","n","coefficient","calculateFromTerm","round","resultsContainer","displayType","style","fontWeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.86deca35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__KHrTf\",\"choosableFormsContainer\":\"Main_choosableFormsContainer__1Iz2J\",\"resultsContainer\":\"Main_resultsContainer__2Tvw1\",\"choosableFormCard\":\"Main_choosableFormCard__3DH7w\"};","export const DISPLAY_NAMES_RUS = {\r\n  SUM_INPUT_LABEL: \"Сумма кредита\",\r\n  PERCENT_INPUT_LABEL: \"Процентная ставка\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface ConstFormProps {\r\n  handleSumChange: Function;\r\n  handleInterestRateChange: Function;\r\n}\r\n\r\nexport const ConstForm: FunctionComponent<ConstFormProps> = ({\r\n  handleSumChange,\r\n  handleInterestRateChange,\r\n}) => (\r\n    <div>\r\n      <NumberFormat\r\n        customInput={TextField}\r\n        id=\"outlined-full-width\"\r\n        label={DISPLAY_NAMES_RUS.SUM_INPUT_LABEL}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        thousandSeparator={\" \"}\r\n        allowNegative={false}\r\n        decimalScale={2}\r\n        onValueChange={(values) => {\r\n          const { value } = values;\r\n          handleSumChange(value);\r\n        }}\r\n      />\r\n      <NumberFormat\r\n        customInput={TextField}\r\n        id=\"outlined-full-width\"\r\n        label={DISPLAY_NAMES_RUS.PERCENT_INPUT_LABEL}\r\n        fullWidth\r\n        InputProps={{\r\n          endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n        }}\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        thousandSeparator={\" \"}\r\n        allowNegative={false}\r\n        decimalScale={2}\r\n        onValueChange={(values) => {\r\n          const { value } = values;\r\n          handleInterestRateChange(value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n","export const DISPLAY_NAMES_RUS = {\r\n  MONTHLY_PAYMENT_LABEL: \"Ежемесячный платёж\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface PaymentFormProps {\r\n  handleMonthlyPaymentChange: Function;\r\n}\r\n\r\nexport const PaymentForm: FunctionComponent<PaymentFormProps> = ({\r\n  handleMonthlyPaymentChange,\r\n}) => (\r\n    <div>\r\n      <NumberFormat\r\n        customInput={TextField}\r\n        id=\"outlined-full-width\"\r\n        label={DISPLAY_NAMES_RUS.MONTHLY_PAYMENT_LABEL}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        thousandSeparator={\" \"}\r\n        allowNegative={false}\r\n        decimalScale={2}\r\n        onValueChange={(values) => {\r\n          const { value } = values;\r\n          handleMonthlyPaymentChange(value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n","export const DISPLAY_NAMES_RUS = {\r\n  TERM_LABEL: \"Срок кредитования\",\r\n  DIFF_RADIO: \"Дифференцированный платеж\",\r\n  ANNUITY_RADIO: \"Аннуитетный платеж\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\r\n\r\ninterface TermFormProps {\r\n  handleTermChange: Function;\r\n}\r\n\r\nexport const TermForm: FunctionComponent<TermFormProps> = ({\r\n  handleTermChange,\r\n}) => (\r\n    <div>\r\n      <NumberFormat\r\n        customInput={TextField}\r\n        id=\"outlined-full-width\"\r\n        label={DISPLAY_NAMES_RUS.TERM_LABEL}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        thousandSeparator={\" \"}\r\n        allowNegative={false}\r\n        decimalScale={0}\r\n        onValueChange={(values) => {\r\n          const { value } = values;\r\n          handleTermChange(value);\r\n        }}\r\n      />\r\n      {/* value={value} onChange={handleChange} */}\r\n      <RadioGroup aria-label=\"annuity\" value=\"annuity\" name=\"annuity\">\r\n        <FormControlLabel\r\n          value=\"annuity\"\r\n          control={<Radio />}\r\n          label={DISPLAY_NAMES_RUS.ANNUITY_RADIO}\r\n        />\r\n        <FormControlLabel\r\n          value=\"differential\"\r\n          control={<Radio />}\r\n          label={DISPLAY_NAMES_RUS.DIFF_RADIO}\r\n        />\r\n      </RadioGroup>\r\n    </div>\r\n  );\r\n","export const DISPLAY_NAMES_RUS = {\r\n  APP_NAME: \"Кредитный калькулятор\",\r\n};\r\n","import round from \"lodash/round\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport { ConstForm, PaymentForm, TermForm } from \"../../components\";\r\nimport { calculateFromMonthlyPayment, calculateFromTerm } from \"../../utils\";\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\nimport classes from \"./Main.module.scss\";\r\n\r\nexport const Main = () => {\r\n  const [sum, setSum] = useState<number>(0);\r\n  const [monthNumberResult, setMonthNumberResult] = useState<number>(0);\r\n  const [overpayment, setOverpayment] = useState<number>(0);\r\n  const [interestRate, setInterestRate] = useState<number>(0);\r\n  const [monthlyPayment, setMonthlyPayment] = useState<number>(0);\r\n  const [term, setTerm] = useState<number>(0);\r\n  const [monthlyPaymentResult, setMonthlyPaymentResult] = useState<number>(0);\r\n\r\n  const handleSumChange = (value: string) => {\r\n    setSum(Number(value));\r\n  };\r\n\r\n  const handleInterestRateChange = (value: string) => {\r\n    setInterestRate(Number(value));\r\n  };\r\n\r\n  const handleMonthlyPaymentChange = (value: string) => {\r\n    setMonthlyPayment(Number(value));\r\n  };\r\n\r\n  const handleTermChange = (value: string) => {\r\n    setTerm(Number(value));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.main}>\r\n      <header>{DISPLAY_NAMES_RUS.APP_NAME}</header>\r\n      <ConstForm\r\n        handleSumChange={handleSumChange}\r\n        handleInterestRateChange={handleInterestRateChange}\r\n      />\r\n      <hr />\r\n      <div className={classes.choosableFormsContainer}>\r\n        <div className={classes.choosableFormCard}>\r\n          <TermForm handleTermChange={handleTermChange} />\r\n        </div>\r\n        <div className={classes.choosableFormCard}>\r\n          <PaymentForm\r\n            handleMonthlyPaymentChange={handleMonthlyPaymentChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          const { months, overpayment } = calculateFromMonthlyPayment(\r\n            sum,\r\n            monthlyPayment,\r\n            [{ interestRate, startMonth: 1 }]\r\n          );\r\n\r\n          const calculateFromTermResult: number = calculateFromTerm(\r\n            sum,\r\n            interestRate,\r\n            term\r\n          );\r\n\r\n          setMonthNumberResult(months);\r\n          setOverpayment(round(overpayment, 2));\r\n          setMonthlyPaymentResult(round(calculateFromTermResult, 2));\r\n        }}\r\n      >\r\n        Рассчитать\r\n      </Button>\r\n      <div className={classes.resultsContainer}>\r\n        <div>\r\n          Ежемесячный платёж:{\" \"}\r\n          <span ><NumberFormat value={monthlyPaymentResult} thousandSeparator={\" \"} displayType={'text'} style={{ fontWeight: \"bold\" }} /></span>\r\n          <br />\r\n          Срок выплат составит:{\" \"}\r\n          <span ><NumberFormat value={monthNumberResult} thousandSeparator={\" \"} displayType={'text'} style={{ fontWeight: \"bold\" }} /></span>{\" \"}\r\n          месяцев\r\n        </div>\r\n        <div>\r\n          Переплата составит:{\" \"}\r\n          <span ><NumberFormat value={overpayment} thousandSeparator={\" \"} displayType={'text'} style={{ fontWeight: \"bold\" }} /></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export function calculateFromMonthlyPayment(\r\n  sum: number,\r\n  moPayment: number,\r\n  percentageArray: Array<{ interestRate: number; startMonth: number }>,\r\n  detailed: boolean = false\r\n): {\r\n  months: number;\r\n  overpayment: number;\r\n  error?: string;\r\n} {\r\n  let i = 0;\r\n  let overpayment = 0;\r\n  let descendPercArray = percentageArray.sort(\r\n    (a, b) => b.startMonth - a.startMonth\r\n  );\r\n  const maxyrs = 200;\r\n\r\n  function getYearPercent(month: number) {\r\n    let index = descendPercArray\r\n      .map((el) => el.startMonth)\r\n      .findIndex((el) => el < month + 1);\r\n    return descendPercArray[index].interestRate;\r\n  }\r\n\r\n  function rec(sum: number) {\r\n    if (sum > 0) {\r\n      i++;\r\n      let yearPercent = getYearPercent(i);\r\n      let percentPayment = (sum * yearPercent) / 12 / 100;\r\n      overpayment += percentPayment;\r\n\r\n      if (detailed) {\r\n        console.groupCollapsed(`month ${i}`);\r\n        console.log(\"year percent:\", yearPercent);\r\n        console.log(\"percentPayment:\", percentPayment);\r\n        console.log(\"sum left:\", sum);\r\n        console.groupEnd();\r\n      }\r\n\r\n      if (i < maxyrs * 12) {\r\n        rec(sum + percentPayment - moPayment);\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n  rec(sum);\r\n\r\n  return i > maxyrs * 12\r\n    ? { error: \"stack overflow\", months: 0, overpayment: 0 }\r\n    : {\r\n        months: i,\r\n        overpayment,\r\n      };\r\n}\r\n","export function calculateFromTerm(\r\n  sum: number,\r\n  yearInterest: number,\r\n  periods: number\r\n): number {\r\n  const i = yearInterest / 12 / 100;\r\n  const n = periods;\r\n  const coefficient = (i * (1 + i) ** n) / ((i + 1) ** n - 1);\r\n\r\n  return yearInterest ? coefficient * sum : sum / periods;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\n\r\nimport { Main } from \"./containers\";\r\n\r\nfunction App() {\r\n  return <Main />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}