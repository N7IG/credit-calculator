{"version":3,"sources":["models/PaymentType.enum.ts","components/ConstForm/ConstForm.module.scss","components/AnnuityResult/AnnuityResult.module.scss","components/ByPaymentResult/ByPaymentResult.module.scss","components/ConstForm/display-names.ts","components/ConstForm/ConstForm.tsx","components/PaymentForm/display-names.ts","components/PaymentForm/PaymentForm.tsx","components/TermForm/display-names.ts","components/TermForm/TermForm.tsx","components/AnnuityResult/display-names.ts","components/AnnuityResult/AnnuityResult.tsx","components/DiffResult/display-names.ts","components/DiffResult/DiffResult.tsx","components/Header/Header.tsx","components/ByPaymentResult/display-names.ts","components/ByPaymentResult/ByPaymentResult.tsx","utils/getYearInterestRate.util.ts","utils/calculateFromTermAdvanced.util.ts","utils/calculateFromTerm.util.ts","containers/App/display-names.ts","containers/App/App.tsx","utils/calculateDiffPayments.util.ts","utils/calculateFromMonthlyPayment.util.ts","serviceWorker.ts","index.tsx","models/index.ts","components/DiffResult/DiffResult.module.scss","containers/App/App.module.scss","components/TermForm/TermForm.module.scss","components/Header/Header.module.scss"],"names":["PaymentType","module","exports","DISPLAY_NAMES_RUS","ConstForm","handleSumChange","handleInterestRateChange","useState","id","rates","setRates","customInput","TextField","label","RUS","fullWidth","margin","variant","thousandSeparator","allowNegative","decimalScale","onValueChange","values","value","Number","map","element","index","className","classes","rate","key","InputProps","endAdornment","InputAdornment","position","startMonth","IconButton","color","aria-label","component","onClick","after","remove","Button","String","last","PaymentForm","handleMonthlyPaymentChange","TermForm","handleTermChange","handlePaymentTypeChange","paymentType","paymentTypeTitle","RadioGroup","defaultValue","Annuity","onChange","event","target","FormControlLabel","control","Radio","Differential","AnnuityResult","props","resultsContainer","data","monthlyPaymentResult","monthlyPayment","displayType","style","fontWeight","DiffResult","basicResultContainer","paymentAmount","reduce","acc","curr","amountOfPercentage","Accordion","square","resultDetails","AccordionSummary","expandIcon","aria-controls","AccordionDetails","paymentDetailsExpanded","TableContainer","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","row","hover","scope","paymentPeriod","month","year","amountOfDebt","leftDebtAmount","TableFooter","tableRowFooter","slice","Header","header","dollarIcon","ByPaymentResult","monthNumberResult","overpayment","getYearInterestRate","interestRates","descendRates","sort","a","b","el","findIndex","calculateFromTermAdvanced","sum","periods","balance","monthlyPayments","forEach","initialSum","interestRate","monthlyRate","getSumPayedForPeriod","yearInterest","i","n","coefficient","calculateFromTerm","DISPLAY_MONTHS_NAMES_RUS","App","setSum","setMonthNumberResult","setOverpayment","setInterestRates","setMonthlyPayment","term","setTerm","setMonthlyPaymentResult","setPaymentType","diffPaymentTypeResult","setDiffPaymentResult","React","selectedTab","setSelectedTab","showResults","setShowResults","app","form","TabContext","AppBar","TabList","tabHeader","newTab","indicatorColor","Tab","TabPanel","resultButton","calculateFromTermResult","payment","round","calculatedDiffPaymentTypeResult","monthsToPay","monthsArray","finalResult","totalBasicDept","basicDebtPeymentPerMonth","currentDay","Date","currentMonth","getMonth","currentYear","getFullYear","push","daysInCurrentMonth","getDate","percentagePayment","Math","EPSILON","calculateDiffPayments","moPayment","detailed","THRESHOLD","maxyrs","rec","yearPercent","percentPayment","debtPayment","min","console","group","log","groupEnd","error","months","calculateFromMonthlyPayment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32a25fb6.chunk.js","sourcesContent":["export enum PaymentType {\r\n  Annuity = \"annuity\",\r\n  Differential = \"differential\",\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rate\":\"ConstForm_rate__1Hv84\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsContainer\":\"AnnuityResult_resultsContainer__2U3ao\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultsContainer\":\"ByPaymentResult_resultsContainer__39uHQ\"};","export const DISPLAY_NAMES_RUS = {\r\n  SUM_INPUT_LABEL: \"Сумма кредита\",\r\n  PERCENT_INPUT_LABEL: \"Процентная ставка с\",\r\n  ADD_INTEREST_RATE_LABEL: \"Добавить процентную ставку\",\r\n  YEAR: \"года\",\r\n  NUMERIC_POSTFIX: \"-го\",\r\n};\r\n","import last from \"lodash/last\";\r\nimport remove from \"lodash/remove\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport { Button, IconButton } from \"@material-ui/core\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n// import Add from \"@material-ui/icons/Add\";\r\nimport Close from \"@material-ui/icons/Close\";\r\n\r\nimport classes from \"./ConstForm.module.scss\";\r\nimport { DISPLAY_NAMES_RUS as RUS } from \"./display-names\";\r\nimport { InterestRate } from \"../../models\";\r\n\r\n// TODO: need to pass types to handle functions\r\ninterface ConstFormProps {\r\n  handleSumChange: Function;\r\n  handleInterestRateChange: Function;\r\n}\r\n\r\nexport const ConstForm: FunctionComponent<ConstFormProps> = ({\r\n  handleSumChange,\r\n  handleInterestRateChange,\r\n}) => {\r\n  // TODO: add type\r\n  const [rates, setRates] = useState<{ id: string; rate?: InterestRate }[]>([\r\n    { id: \"1\" },\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <NumberFormat\r\n        customInput={TextField}\r\n        label={RUS.SUM_INPUT_LABEL}\r\n        fullWidth\r\n        margin=\"normal\"\r\n        variant=\"outlined\"\r\n        thousandSeparator={\" \"}\r\n        allowNegative={false}\r\n        decimalScale={2}\r\n        onValueChange={(values) => {\r\n          const { value } = values;\r\n          handleSumChange(Number(value));\r\n        }}\r\n      />\r\n      {rates.map((element, index) => (\r\n        <div className={classes.rate} key={element.id}>\r\n          <NumberFormat\r\n            customInput={TextField}\r\n            label={\r\n              RUS.PERCENT_INPUT_LABEL +\r\n              \" \" +\r\n              (index + 1) +\r\n              RUS.NUMERIC_POSTFIX +\r\n              \" \" +\r\n              RUS.YEAR\r\n            }\r\n            fullWidth\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n            }}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            thousandSeparator={\" \"}\r\n            allowNegative={false}\r\n            decimalScale={2}\r\n            onValueChange={(values) => {\r\n              const { value } = values;\r\n              element.rate = {\r\n                value: Number(value),\r\n                startMonth: 12 * index + 1,\r\n              };\r\n              handleInterestRateChange(rates.map((rate) => rate.rate));\r\n            }}\r\n          />\r\n          {element.id === \"1\" ? (\r\n            \"\"\r\n          ) : (\r\n            <IconButton\r\n              color=\"primary\"\r\n              aria-label=\"upload picture\"\r\n              component=\"span\"\r\n              onClick={() => {\r\n                let after = remove(rates, (rate) => rate.id !== element.id);\r\n\r\n                setRates(after);\r\n                handleInterestRateChange(after.map((rate) => rate.rate));\r\n              }}\r\n            >\r\n              <Close />\r\n            </IconButton>\r\n          )}\r\n        </div>\r\n      ))}\r\n      {/* I tried adding Add icon here but it's styles brake on right click */}\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => {\r\n          setRates([\r\n            ...rates,\r\n            { id: String(Number((last(rates) as any).id) + 1) },\r\n          ]);\r\n        }}\r\n      >\r\n        {RUS.ADD_INTEREST_RATE_LABEL}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","export const DISPLAY_NAMES_RUS = {\r\n  MONTHLY_PAYMENT_LABEL: \"Ежемесячный платёж\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface PaymentFormProps {\r\n  handleMonthlyPaymentChange: Function;\r\n}\r\n\r\nexport const PaymentForm: FunctionComponent<PaymentFormProps> = ({\r\n  handleMonthlyPaymentChange,\r\n}) => (\r\n  <div>\r\n    <NumberFormat\r\n      customInput={TextField}\r\n      label={DISPLAY_NAMES_RUS.MONTHLY_PAYMENT_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      thousandSeparator={\" \"}\r\n      allowNegative={false}\r\n      decimalScale={2}\r\n      onValueChange={(values) => {\r\n        const { value } = values;\r\n        handleMonthlyPaymentChange(Number(value));\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  TERM_LABEL: \"Срок кредитования\",\r\n  PAYMENT_TYPE_LABEL: \"Порядок погашения\",\r\n  DIFF_RADIO: \"Дифференцированный\",\r\n  ANNUITY_RADIO: \"Аннуитетный\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\r\nimport { PaymentType } from \"../../models\";\r\nimport classes from \"./TermForm.module.scss\";\r\n\r\ninterface TermFormProps {\r\n  handleTermChange: Function;\r\n  handlePaymentTypeChange: Function;\r\n}\r\n\r\nexport const TermForm: FunctionComponent<TermFormProps> = ({\r\n  handleTermChange,\r\n  handlePaymentTypeChange,\r\n}) => (\r\n  <div>\r\n    <NumberFormat\r\n      customInput={TextField}\r\n      label={DISPLAY_NAMES_RUS.TERM_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      thousandSeparator={\" \"}\r\n      allowNegative={false}\r\n      decimalScale={0}\r\n      onValueChange={(values) => {\r\n        const { value } = values;\r\n        handleTermChange(Number(value));\r\n      }}\r\n    />\r\n    <div className={classes.paymentType}>\r\n      <label className={classes.paymentTypeTitle}>\r\n        {DISPLAY_NAMES_RUS.PAYMENT_TYPE_LABEL}\r\n      </label>\r\n      <RadioGroup\r\n        color=\"secondary\"\r\n        aria-label=\"payment_type\"\r\n        defaultValue={PaymentType.Annuity}\r\n        onChange={(event) => {\r\n          handlePaymentTypeChange(event.target.value);\r\n        }}\r\n      >\r\n        <FormControlLabel\r\n          value={PaymentType.Annuity}\r\n          control={<Radio color=\"primary\" />}\r\n          label={DISPLAY_NAMES_RUS.ANNUITY_RADIO}\r\n        />\r\n        <FormControlLabel\r\n          value={PaymentType.Differential}\r\n          control={<Radio color=\"primary\" />}\r\n          label={DISPLAY_NAMES_RUS.DIFF_RADIO}\r\n        />\r\n      </RadioGroup>\r\n    </div>\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  CALCULATION_RESULT: \"Результат расчета\",\r\n  MONTH_PAYMENT: \"Ежемесячный платёж с\",\r\n  YEAR: \"года\",\r\n  NUMERIC_POSTFIX: \"-го\",\r\n};\r\n","import React from \"react\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport classes from \"./AnnuityResult.module.scss\";\r\n\r\nimport { AnnuityDataPropsResult } from \"../../models/index\";\r\nimport { DISPLAY_NAMES_RUS as RUS } from \"./display-names\";\r\n\r\nexport function AnnuityResult(props: AnnuityDataPropsResult) {\r\n  return (\r\n    <div className={classes.resultsContainer}>\r\n      <h2>{RUS.CALCULATION_RESULT}</h2>\r\n      {props.data.monthlyPaymentResult.map((monthlyPayment, index) => (\r\n        <div key={index}>\r\n          {RUS.MONTH_PAYMENT} {index + 1}\r\n          {RUS.NUMERIC_POSTFIX} {RUS.YEAR}:{\" \"}\r\n          <span>\r\n            <NumberFormat\r\n              value={monthlyPayment}\r\n              thousandSeparator={\" \"}\r\n              decimalScale={2}\r\n              displayType={\"text\"}\r\n              style={{ fontWeight: \"bold\" }}\r\n            />\r\n          </span>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","export const DISPLAY_NAMES_RUS = {\r\n  PAYMENT_FOR_PERIOD: \"Дата\",\r\n  PAYMENT: \"платеж\",\r\n  PAYMENT_ISSUE: \"Выдача кредита\",\r\n  PAYMENT_LEFT: \"Остаток\",\r\n  BASIC_DEBT_PERIOD_PAYMENT: \"Тело кредита\",\r\n  PERCENTAGE_PERIOD_PAYMENT: \"Проценты\",\r\n  TOTAL_PERIOD_PAYMENT: \"Платеж\",\r\n  FIRST_PAYMENT: \"Первый платеж\",\r\n  OVERPAYMENT: \"Переплата\",\r\n  DETAILS: \"Детализация платежей\",\r\n  SUMMARIZE: \"Всего выплат\",\r\n  CALCULATION_RESULT: \"Результат расчета\",\r\n};\r\n","import React from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport classes from \"./DiffResult.module.scss\";\r\nimport {\r\n  DiffTableResultContent,\r\n  DiffTableRawContent,\r\n} from \"../../models/DiffResult.model\";\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\nexport function DiffResult(props: DiffTableResultContent) {\r\n  return (\r\n    <div>\r\n      <div className={classes.basicResultContainer}>\r\n        <h2>{DISPLAY_NAMES_RUS.CALCULATION_RESULT}</h2>\r\n        <div>\r\n          {DISPLAY_NAMES_RUS.FIRST_PAYMENT}:{\" \"}\r\n          <span>\r\n            <NumberFormat\r\n              value={props.data[1].paymentAmount}\r\n              thousandSeparator={\" \"}\r\n              decimalScale={2}\r\n              displayType={\"text\"}\r\n              style={{ fontWeight: \"bold\" }}\r\n            />\r\n          </span>\r\n        </div>\r\n        <div>\r\n          {DISPLAY_NAMES_RUS.OVERPAYMENT}:{\" \"}\r\n          <span>\r\n            <NumberFormat\r\n              value={props.data.reduce((acc, curr) => {\r\n                return acc + curr.amountOfPercentage;\r\n              }, 0)}\r\n              thousandSeparator={\" \"}\r\n              decimalScale={2}\r\n              displayType={\"text\"}\r\n              style={{ fontWeight: \"bold\" }}\r\n            />\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <Accordion square={true} className={classes.resultDetails}>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\r\n          aria-controls=\"payment-details\"\r\n          id=\"payment-details\"\r\n        >\r\n          <div>{DISPLAY_NAMES_RUS.DETAILS}</div>\r\n        </AccordionSummary>\r\n        <AccordionDetails className={classes.paymentDetailsExpanded}>\r\n          <TableContainer component={Paper}>\r\n            <Table stickyHeader>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.PAYMENT_FOR_PERIOD}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.TOTAL_PERIOD_PAYMENT}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.PERCENTAGE_PERIOD_PAYMENT}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.BASIC_DEBT_PERIOD_PAYMENT}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.PAYMENT_LEFT}</b>\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {props.data.map((row: DiffTableRawContent, index: number) => (\r\n                  <TableRow key={index} hover={true}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {index\r\n                        ? index + \" \" + DISPLAY_NAMES_RUS.PAYMENT\r\n                        : DISPLAY_NAMES_RUS.PAYMENT_ISSUE}\r\n                      <br />\r\n                      <small>\r\n                        {row.paymentPeriod.month}, {row.paymentPeriod.year}\r\n                      </small>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.paymentAmount}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.amountOfPercentage}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.amountOfDebt}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {\r\n                        <NumberFormat\r\n                          value={row.leftDebtAmount}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                        />\r\n                      }\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n              <TableFooter>\r\n                <TableRow className={classes.tableRowFooter}>\r\n                  <TableCell>\r\n                    <b>{DISPLAY_NAMES_RUS.SUMMARIZE}</b>\r\n                  </TableCell>\r\n\r\n                  <TableCell>\r\n                    {\r\n                      <b>\r\n                        <NumberFormat\r\n                          value={props.data.reduce((acc, curr) => {\r\n                            return acc + curr.paymentAmount;\r\n                          }, 0)}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        />\r\n                      </b>\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {\r\n                      <b>\r\n                        <NumberFormat\r\n                          value={props.data.reduce((acc, curr) => {\r\n                            return acc + curr.amountOfPercentage;\r\n                          }, 0)}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        />\r\n                      </b>\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {\r\n                      <b>\r\n                        <NumberFormat\r\n                          value={props.data.reduce((acc, curr) => {\r\n                            return acc + curr.amountOfDebt;\r\n                          }, 0)}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        />\r\n                      </b>\r\n                    }\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    {\r\n                      <b>\r\n                        <NumberFormat\r\n                          value={props.data.slice(-1)[0].leftDebtAmount}\r\n                          thousandSeparator={\" \"}\r\n                          decimalScale={2}\r\n                          displayType={\"text\"}\r\n                          style={{ fontWeight: \"bold\" }}\r\n                        />\r\n                      </b>\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableFooter>\r\n            </Table>\r\n          </TableContainer>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport AttachMoneyIcon from \"@material-ui/icons/AttachMoney\";\r\n\r\nimport classes from \"./Header.module.scss\";\r\n\r\nexport const Header = () => (\r\n  <section className={classes.header}>\r\n    <div className={classes.dollarIcon}>\r\n      <AttachMoneyIcon />\r\n    </div>\r\n    <h1>Кредитный калькулятор</h1>\r\n  </section>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  MONTHS: \"месяцев\",\r\n  CALCULATED_PAYMENT_PERIOD: \"Срок выплат составит\",\r\n  CALCULATED_OVERPAYMENT: \"Переплата составит\",\r\n  CALCULATION_RESULT: \"Результат расчета\",\r\n};\r\n","import React from \"react\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport classes from \"./ByPaymentResult.module.scss\";\r\n\r\nimport { ByPaymentDataResult } from \"../../models/index\";\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\nexport function ByPaymentResult(props: ByPaymentDataResult) {\r\n  return (\r\n    <div className={classes.resultsContainer}>\r\n      <h2>{DISPLAY_NAMES_RUS.CALCULATION_RESULT}</h2>\r\n      <div>\r\n        {DISPLAY_NAMES_RUS.CALCULATED_PAYMENT_PERIOD}:{\" \"}\r\n        <span>\r\n          <NumberFormat\r\n            value={props.data.monthNumberResult}\r\n            thousandSeparator={\" \"}\r\n            decimalScale={0}\r\n            displayType={\"text\"}\r\n            style={{ fontWeight: \"bold\" }}\r\n          />\r\n        </span>{\" \"}\r\n        {DISPLAY_NAMES_RUS.MONTHS}\r\n        <br />\r\n        {DISPLAY_NAMES_RUS.CALCULATED_OVERPAYMENT}:{\" \"}\r\n        <span>\r\n          <NumberFormat\r\n            value={props.data.overpayment}\r\n            thousandSeparator={\" \"}\r\n            decimalScale={2}\r\n            displayType={\"text\"}\r\n            style={{ fontWeight: \"bold\" }}\r\n          />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { InterestRate } from \"../models\";\r\n\r\nexport function getYearInterestRate(\r\n  month: number,\r\n  interestRates: InterestRate[]\r\n) {\r\n  let descendRates = interestRates.sort((a, b) => b.startMonth - a.startMonth);\r\n  let index = descendRates\r\n    .map((el) => el.startMonth)\r\n    .findIndex((el) => el < month + 1);\r\n  return descendRates[index].value;\r\n}\r\n","import { calculateFromTerm } from \"./calculateFromTerm.util\";\r\nimport { InterestRate } from \"../models\";\r\n\r\nexport function calculateFromTermAdvanced(\r\n  sum: number,\r\n  interestRates: Array<InterestRate>,\r\n  periods: number\r\n): number[] {\r\n  // the only difference when calculating monthly payment with multiple interest rates is that we should\r\n  // recalculate an annuity payment for the balance and periods left when interest rate changes\r\n  let balance: number = sum;\r\n  let monthlyPayments: number[] = [];\r\n  interestRates.map((rate) => rate.startMonth);\r\n  interestRates.forEach((rate, index) => {\r\n    if (index) {\r\n      balance -= getSumPayedForPeriod(\r\n        balance,\r\n        monthlyPayments[index - 1],\r\n        interestRates[index - 1].value,\r\n        rate.startMonth - interestRates[index - 1].startMonth\r\n      );\r\n    }\r\n    let monthlyPayment = calculateFromTerm(\r\n      balance,\r\n      rate.value,\r\n      periods - rate.startMonth + 1\r\n    );\r\n    monthlyPayments[index] = monthlyPayment;\r\n  });\r\n\r\n  return monthlyPayments;\r\n}\r\n\r\nfunction getSumPayedForPeriod(\r\n  initialSum: number,\r\n  monthlyPayment: number,\r\n  interestRate: number,\r\n  periods: number\r\n): number {\r\n  const monthlyRate: number = interestRate / 100 / 12;\r\n  const b1: number = monthlyPayment - initialSum * monthlyRate;\r\n\r\n  return (b1 * ((1 + monthlyRate) ** periods - 1)) / monthlyRate;\r\n}\r\n","export function calculateFromTerm(\r\n  sum: number,\r\n  yearInterest: number,\r\n  periods: number\r\n): number {\r\n  const i = yearInterest / 12 / 100;\r\n  const n = periods;\r\n  const coefficient = (i * (1 + i) ** n) / ((i + 1) ** n - 1);\r\n\r\n  return yearInterest ? coefficient * sum : sum / periods;\r\n}\r\n","export const DISPLAY_NAMES_RUS = {\r\n  BY_PAYMENT_PERIOD: \"По сроку кредита\",\r\n  BY_PAYMENT_AMOUNT: \"По сумме платежа\",\r\n};\r\nexport const DISPLAY_MONTHS_NAMES_RUS = [\r\n  \"Январь\",\r\n  \"Февраль\",\r\n  \"Март\",\r\n  \"Апрель\",\r\n  \"Май\",\r\n  \"Июнь\",\r\n  \"Июль\",\r\n  \"Август\",\r\n  \"Сентябрь\",\r\n  \"Октябрь\",\r\n  \"Ноябрь\",\r\n  \"Декабрь\",\r\n];\r\n","import AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\n\r\nimport TabContext from \"@material-ui/lab/TabContext\";\r\nimport TabList from \"@material-ui/lab/TabList\";\r\nimport TabPanel from \"@material-ui/lab/TabPanel\";\r\nimport round from \"lodash/round\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport {\r\n  AnnuityResult,\r\n  ConstForm,\r\n  DiffResult,\r\n  PaymentForm,\r\n  TermForm,\r\n  Header,\r\n} from \"../../components\";\r\nimport { ByPaymentResult } from \"../../components/ByPaymentResult\";\r\nimport {\r\n  DiffTableRawContent,\r\n  InterestRate,\r\n  PaymentType,\r\n} from \"../../models/index\";\r\nimport {\r\n  calculateDiffPayments,\r\n  calculateFromMonthlyPayment,\r\n} from \"../../utils\";\r\nimport { calculateFromTermAdvanced } from \"../../utils/calculateFromTermAdvanced.util\";\r\nimport classes from \"./App.module.scss\";\r\nimport { DISPLAY_MONTHS_NAMES_RUS, DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\nexport const App = () => {\r\n  const [sum, setSum] = useState<number>(0);\r\n  const [monthNumberResult, setMonthNumberResult] = useState<number>(0);\r\n  const [overpayment, setOverpayment] = useState<number>(0);\r\n  const [interestRates, setInterestRates] = useState<InterestRate[]>([]);\r\n  const [monthlyPayment, setMonthlyPayment] = useState<number>(0);\r\n  const [term, setTerm] = useState<number>(0);\r\n  const [monthlyPaymentResult, setMonthlyPaymentResult] = useState<\r\n    Array<number>\r\n  >([]);\r\n  const [paymentType, setPaymentType] = useState<PaymentType>(\r\n    PaymentType.Annuity\r\n  );\r\n  const [diffPaymentTypeResult, setDiffPaymentResult] = useState<\r\n    Array<DiffTableRawContent>\r\n  >([]);\r\n  const [selectedTab, setSelectedTab] = React.useState(\r\n    DISPLAY_NAMES_RUS.BY_PAYMENT_PERIOD\r\n  );\r\n  const [showResults, setShowResults] = React.useState(false);\r\n\r\n  const handlePaymentTypeChange = (value: PaymentType) => {\r\n    setPaymentType(value);\r\n    setShowResults(false);\r\n  };\r\n\r\n  // TODO: wtf. why is it repeating\r\n  const handleTabChange = (event: React.ChangeEvent<{}>, newTab: string) => {\r\n    setSelectedTab(newTab);\r\n    setSum(0);\r\n    setInterestRates([]);\r\n    setMonthlyPayment(0);\r\n    setTerm(0);\r\n    setPaymentType(PaymentType.Annuity);\r\n    setDiffPaymentResult([]);\r\n    setMonthlyPaymentResult([]);\r\n    setMonthNumberResult(0);\r\n    setOverpayment(0);\r\n    setShowResults(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.app}>\r\n      <Header />\r\n      <section className={classes.form}>\r\n        <TabContext value={selectedTab}>\r\n          <AppBar position=\"static\">\r\n            <TabList\r\n              className={classes.tabHeader}\r\n              onChange={handleTabChange}\r\n              aria-label=\"tabs\"\r\n              indicatorColor=\"primary\"\r\n            >\r\n              <Tab\r\n                label={DISPLAY_NAMES_RUS.BY_PAYMENT_PERIOD}\r\n                value={DISPLAY_NAMES_RUS.BY_PAYMENT_PERIOD}\r\n              />\r\n              <Tab\r\n                label={DISPLAY_NAMES_RUS.BY_PAYMENT_AMOUNT}\r\n                value={DISPLAY_NAMES_RUS.BY_PAYMENT_AMOUNT}\r\n              />\r\n            </TabList>\r\n          </AppBar>\r\n          <TabPanel value={DISPLAY_NAMES_RUS.BY_PAYMENT_PERIOD}>\r\n            <ConstForm\r\n              handleSumChange={setSum}\r\n              handleInterestRateChange={setInterestRates}\r\n            />\r\n            <TermForm\r\n              handleTermChange={setTerm}\r\n              handlePaymentTypeChange={handlePaymentTypeChange}\r\n            />\r\n          </TabPanel>\r\n          <TabPanel value={DISPLAY_NAMES_RUS.BY_PAYMENT_AMOUNT}>\r\n            <ConstForm\r\n              handleSumChange={setSum}\r\n              handleInterestRateChange={setInterestRates}\r\n            />\r\n            <PaymentForm handleMonthlyPaymentChange={setMonthlyPayment} />\r\n          </TabPanel>\r\n        </TabContext>\r\n        <hr />\r\n        <Button\r\n          className={classes.resultButton}\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          onClick={() => {\r\n            setShowResults(true);\r\n            if (selectedTab === DISPLAY_NAMES_RUS.BY_PAYMENT_PERIOD) {\r\n              if (paymentType === PaymentType.Annuity) {\r\n                const calculateFromTermResult: number[] = calculateFromTermAdvanced(\r\n                  sum,\r\n                  interestRates,\r\n                  term\r\n                );\r\n\r\n                setMonthlyPaymentResult(\r\n                  calculateFromTermResult.map((payment) => round(payment, 2))\r\n                );\r\n              } else {\r\n                const calculatedDiffPaymentTypeResult: Array<DiffTableRawContent> = calculateDiffPayments(\r\n                  sum,\r\n                  term,\r\n                  interestRates,\r\n                  DISPLAY_MONTHS_NAMES_RUS\r\n                );\r\n\r\n                setDiffPaymentResult(calculatedDiffPaymentTypeResult);\r\n              }\r\n            } else {\r\n              const { months, overpayment } = calculateFromMonthlyPayment(\r\n                sum,\r\n                monthlyPayment,\r\n                interestRates,\r\n                true\r\n              );\r\n\r\n              setMonthNumberResult(months);\r\n              setOverpayment(round(overpayment, 2));\r\n            }\r\n          }}\r\n        >\r\n          Рассчитать\r\n        </Button>\r\n      </section>\r\n      <section>\r\n        {showResults ? (\r\n          selectedTab === DISPLAY_NAMES_RUS.BY_PAYMENT_PERIOD ||\r\n          diffPaymentTypeResult.length ? (\r\n            paymentType === PaymentType.Annuity ? (\r\n              <AnnuityResult\r\n                data={{\r\n                  monthlyPaymentResult,\r\n                }}\r\n              />\r\n            ) : (\r\n              <DiffResult data={diffPaymentTypeResult} />\r\n            )\r\n          ) : (\r\n            <ByPaymentResult\r\n              data={{\r\n                monthNumberResult,\r\n                overpayment,\r\n              }}\r\n            />\r\n          )\r\n        ) : (\r\n          \" \"\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n","import { DiffTableRawContent, InterestRate } from \"../models/index\";\r\nimport { getYearInterestRate } from \"./getYearInterestRate.util\";\r\n\r\nexport function calculateDiffPayments(\r\n  sum: number,\r\n  monthsToPay: number,\r\n  interestRates: Array<InterestRate>,\r\n  monthsArray: string[]\r\n): Array<DiffTableRawContent> {\r\n  const finalResult: Array<DiffTableRawContent> = [];\r\n  let totalBasicDept: number = sum;\r\n  const basicDebtPeymentPerMonth: number = sum / monthsToPay;\r\n  const currentDay: Date = new Date();\r\n  let currentMonth: number = currentDay.getMonth();\r\n  let currentYear: number = currentDay.getFullYear();\r\n\r\n  finalResult.push({\r\n    paymentPeriod: { month: monthsArray[currentMonth], year: currentYear },\r\n    paymentAmount: 0,\r\n    amountOfDebt: 0,\r\n    amountOfPercentage: 0,\r\n    leftDebtAmount: totalBasicDept,\r\n  });\r\n\r\n  currentMonth++;\r\n\r\n  for (let i = 0; i < monthsToPay; i++) {\r\n    let daysInCurrentMonth = new Date(\r\n      currentYear,\r\n      currentMonth + 1,\r\n      0\r\n    ).getDate();\r\n    let percentage = getYearInterestRate(i + 1, interestRates);\r\n    let currentMonthPercentageCoeff =\r\n      ((percentage / 100) * daysInCurrentMonth) / 365;\r\n    let percentagePayment = totalBasicDept * currentMonthPercentageCoeff;\r\n\r\n    totalBasicDept -= basicDebtPeymentPerMonth;\r\n\r\n    finalResult.push({\r\n      paymentPeriod: { month: monthsArray[currentMonth], year: currentYear },\r\n      paymentAmount:\r\n        Math.round(\r\n          (basicDebtPeymentPerMonth + percentagePayment + Number.EPSILON) * 100\r\n        ) / 100,\r\n      amountOfDebt:\r\n        Math.round((basicDebtPeymentPerMonth + Number.EPSILON) * 100) / 100,\r\n      amountOfPercentage:\r\n        Math.round((percentagePayment + Number.EPSILON) * 100) / 100,\r\n      leftDebtAmount: totalBasicDept,\r\n    });\r\n\r\n    currentMonth++;\r\n    if (currentMonth === 12) {\r\n      currentYear++;\r\n      currentMonth -= 12;\r\n    }\r\n  }\r\n\r\n  return finalResult;\r\n}\r\n","import { InterestRate } from \"../models\";\r\nimport { getYearInterestRate } from \"./getYearInterestRate.util\";\r\n\r\nexport function calculateFromMonthlyPayment(\r\n  sum: number,\r\n  moPayment: number,\r\n  interestRates: Array<InterestRate>,\r\n  detailed: boolean = false\r\n): {\r\n  months: number;\r\n  overpayment: number;\r\n  error?: string;\r\n} {\r\n  const THRESHOLD: number = 1;\r\n  let i = 0;\r\n  let overpayment = 0;\r\n  const maxyrs = 200;\r\n\r\n  function rec(sum: number) {\r\n    if (sum > 0 + THRESHOLD) {\r\n      i++;\r\n      let yearPercent = getYearInterestRate(i, interestRates);\r\n      let percentPayment = (sum * yearPercent) / 12 / 100;\r\n      let debtPayment = Math.min(moPayment - percentPayment, sum);\r\n      overpayment += percentPayment;\r\n\r\n      if (detailed) {\r\n        console.group(`month ${i}:`);\r\n        console.log(\"year percent:\", yearPercent);\r\n        console.log(\"percentPayment:\", percentPayment);\r\n        console.log(\"debt payment:\", debtPayment);\r\n        console.log(\"sum left:\", sum - debtPayment);\r\n        console.groupEnd();\r\n      }\r\n\r\n      if (i < maxyrs * 12) {\r\n        rec(sum - debtPayment);\r\n      }\r\n    }\r\n  }\r\n  rec(sum);\r\n\r\n  return i >= maxyrs * 12\r\n    ? { error: \"stack overflow\", months: 0, overpayment: 0 }\r\n    : {\r\n        months: i,\r\n        overpayment,\r\n      };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./containers\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// <React.StrictMode></React.StrictMode>\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export * from \"./DiffResult.model\";\r\nexport * from \"./AnnuityResult.model\";\r\nexport * from \"./ByPaymentResult.model\";\r\nexport * from \"./PaymentType.enum\";\r\nexport * from \"./InterestRate.model\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"DiffResult_tableContainer__2HPkD\",\"basicResultContainer\":\"DiffResult_basicResultContainer__3sNuA\",\"expandIcon\":\"DiffResult_expandIcon__1YbFi\",\"resultDetails\":\"DiffResult_resultDetails__31j9i\",\"paymentDetailsExpanded\":\"DiffResult_paymentDetailsExpanded__2t9q4\",\"tableRowFooter\":\"DiffResult_tableRowFooter__3a2M4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1bpUB\",\"tabHeader\":\"App_tabHeader__s49QB\",\"form\":\"App_form__2ktpF\",\"resultButton\":\"App_resultButton__HyobI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paymentType\":\"TermForm_paymentType__1B7pa\",\"paymentTypeTitle\":\"TermForm_paymentTypeTitle__786Kk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__284d1\",\"dollarIcon\":\"Header_dollarIcon__1UxZh\"};"],"sourceRoot":""}