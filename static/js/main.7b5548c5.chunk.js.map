{"version":3,"sources":["containers/Main/Main.module.scss","components/ConstForm/display-names.ts","components/ConstForm/ConstForm.tsx","components/PaymentForm/display-names.ts","components/PaymentForm/PaymentForm.tsx","components/TermForm/display-names.ts","components/TermForm/TermForm.tsx","containers/Main/display-names.ts","containers/Main/Main.tsx","utils/calculateFromMonthlyPayment.util.ts","utils/calculateFromTerm.util.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","DISPLAY_NAMES_RUS","ConstForm","handleSumChange","handleInterestRateChange","TextField","id","type","label","fullWidth","margin","variant","onChange","event","target","value","InputProps","endAdornment","InputAdornment","position","PaymentForm","handleMonthlyPaymentChange","TermForm","handleTermChange","RadioGroup","aria-label","name","FormControlLabel","control","Radio","Main","useState","sum","setSum","monthNumberResult","setMonthNumberResult","overpayment","setOverpayment","interestRate","setInterestRate","monthlyPayment","setMonthlyPayment","term","setTerm","monthlyPaymentResult","setMonthlyPaymentResult","className","classes","main","Number","choosableFormsContainer","choosableFormCard","Button","color","onClick","moPayment","percentageArray","detailed","i","descendPercArray","sort","a","b","startMonth","maxyrs","getYearPercent","month","index","map","el","findIndex","rec","yearPercent","percentPayment","console","groupCollapsed","log","groupEnd","error","months","calculateFromMonthlyPayment","calculateFromTermResult","yearInterest","periods","n","coefficient","calculateFromTerm","toFixed","round","resultsContainer","style","fontWeight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7b5548c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__2bnIL\",\"choosableFormsContainer\":\"Main_choosableFormsContainer__3BSuu\",\"resultsContainer\":\"Main_resultsContainer__1ejU0\",\"choosableFormCard\":\"Main_choosableFormCard__3BTFm\"};","export const DISPLAY_NAMES_RUS = {\r\n  SUM_INPUT_LABEL: \"Сумма кредита\",\r\n  PERCENT_INPUT_LABEL: \"Процентная ставка\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface ConstFormProps {\r\n  handleSumChange: Function;\r\n  handleInterestRateChange: Function;\r\n}\r\n\r\nexport const ConstForm: FunctionComponent<ConstFormProps> = ({\r\n  handleSumChange,\r\n  handleInterestRateChange,\r\n}) => (\r\n  <div>\r\n    <TextField\r\n      id=\"outlined-full-width\"\r\n      type=\"number\"\r\n      label={DISPLAY_NAMES_RUS.SUM_INPUT_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      onChange={(event) => {\r\n        handleSumChange(event.target.value);\r\n      }}\r\n    />\r\n\r\n    <TextField\r\n      id=\"outlined-full-width\"\r\n      type=\"number\"\r\n      label={DISPLAY_NAMES_RUS.PERCENT_INPUT_LABEL}\r\n      fullWidth\r\n      InputProps={{\r\n        endAdornment: <InputAdornment position=\"end\">%</InputAdornment>,\r\n      }}\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      onChange={(event) => {\r\n        handleInterestRateChange(event.target.value);\r\n      }}\r\n    />\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  MONTHLY_PAYMENT_LABEL: \"Ежемесячный платёж\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\n\r\ninterface PaymentFormProps {\r\n  handleMonthlyPaymentChange: Function;\r\n}\r\n\r\nexport const PaymentForm: FunctionComponent<PaymentFormProps> = ({\r\n  handleMonthlyPaymentChange,\r\n}) => (\r\n  <div>\r\n    <TextField\r\n      id=\"outlined-full-width\"\r\n      label={DISPLAY_NAMES_RUS.MONTHLY_PAYMENT_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      onChange={(event) => handleMonthlyPaymentChange(event.target.value)}\r\n    />\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  TERM_LABEL: \"Срок кредитования\",\r\n  DIFF_RADIO: \"Дифференцированные платежи\",\r\n  ANNUITY_RADIO: \"Аннуитет\",\r\n};\r\n","import React, { FunctionComponent } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\nimport { RadioGroup, FormControlLabel, Radio } from \"@material-ui/core\";\r\n\r\ninterface TermFormProps {\r\n  handleTermChange: Function;\r\n}\r\n\r\nexport const TermForm: FunctionComponent<TermFormProps> = ({\r\n  handleTermChange,\r\n}) => (\r\n  <div>\r\n    <TextField\r\n      id=\"outlined-full-width\"\r\n      label={DISPLAY_NAMES_RUS.TERM_LABEL}\r\n      fullWidth\r\n      margin=\"normal\"\r\n      variant=\"outlined\"\r\n      onChange={(event) => handleTermChange(event.target.value)}\r\n    />\r\n    {/* value={value} onChange={handleChange} */}\r\n    <RadioGroup aria-label=\"annuity\" value=\"annuity\" name=\"annuity\">\r\n      <FormControlLabel\r\n        value=\"annuity\"\r\n        control={<Radio />}\r\n        label={DISPLAY_NAMES_RUS.ANNUITY_RADIO}\r\n      />\r\n      <FormControlLabel\r\n        value=\"differential\"\r\n        control={<Radio />}\r\n        label={DISPLAY_NAMES_RUS.DIFF_RADIO}\r\n      />\r\n    </RadioGroup>\r\n  </div>\r\n);\r\n","export const DISPLAY_NAMES_RUS = {\r\n  APP_NAME: \"Кредитный калькулятор\",\r\n};\r\n","import round from \"lodash/round\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { ConstForm, PaymentForm, TermForm } from \"../../components\";\r\nimport { calculateFromMonthlyPayment, calculateFromTerm } from \"../../utils\";\r\nimport { DISPLAY_NAMES_RUS } from \"./display-names\";\r\nimport classes from \"./Main.module.scss\";\r\n\r\nexport const Main = () => {\r\n  const [sum, setSum] = useState<number>(0);\r\n  const [monthNumberResult, setMonthNumberResult] = useState<number>(0);\r\n  const [overpayment, setOverpayment] = useState<number>(0);\r\n  const [interestRate, setInterestRate] = useState<number>(0);\r\n  const [monthlyPayment, setMonthlyPayment] = useState<number>(0);\r\n  const [term, setTerm] = useState<number>(0);\r\n  const [monthlyPaymentResult, setMonthlyPaymentResult] = useState<number>(0);\r\n\r\n  const handleSumChange = (value: string) => {\r\n    setSum(Number(value));\r\n  };\r\n\r\n  const handleInterestRateChange = (value: string) => {\r\n    setInterestRate(Number(value));\r\n  };\r\n\r\n  const handleMonthlyPaymentChange = (value: string) => {\r\n    setMonthlyPayment(Number(value));\r\n  };\r\n\r\n  const handleTermChange = (value: string) => {\r\n    setTerm(Number(value));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.main}>\r\n      <header>{DISPLAY_NAMES_RUS.APP_NAME}</header>\r\n      <ConstForm\r\n        handleSumChange={handleSumChange}\r\n        handleInterestRateChange={handleInterestRateChange}\r\n      />\r\n      <hr />\r\n      <div className={classes.choosableFormsContainer}>\r\n        <div className={classes.choosableFormCard}>\r\n          <TermForm handleTermChange={handleTermChange} />\r\n        </div>\r\n        <div className={classes.choosableFormCard}>\r\n          <PaymentForm\r\n            handleMonthlyPaymentChange={handleMonthlyPaymentChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"outlined\"\r\n        onClick={() => {\r\n          const { months, overpayment } = calculateFromMonthlyPayment(\r\n            sum,\r\n            monthlyPayment,\r\n            [{ interestRate, startMonth: 1 }]\r\n          ) as any;\r\n\r\n          const calculateFromTermResult: number = calculateFromTerm(\r\n            sum,\r\n            interestRate,\r\n            term\r\n          );\r\n\r\n          setMonthNumberResult(months);\r\n          setOverpayment(overpayment.toFixed(2));\r\n          setMonthlyPaymentResult(round(calculateFromTermResult, 2));\r\n        }}\r\n      >\r\n        Рассчитать\r\n      </Button>\r\n      <div className={classes.resultsContainer}>\r\n        <div>\r\n          Ежемесячный платёж:{\" \"}\r\n          <span style={{ fontWeight: \"bold\" }}>{monthlyPaymentResult}</span>.\r\n          <br />\r\n          Срок выплат составит:\r\n          <span style={{ fontWeight: \"bold\" }}> {monthNumberResult}</span>{\" \"}\r\n          месяцев.\r\n        </div>\r\n        <div>\r\n          Переплата составит:\r\n          <span style={{ fontWeight: \"bold\" }}> {overpayment}</span>.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export function calculateFromMonthlyPayment(\r\n  sum: number,\r\n  moPayment: number,\r\n  percentageArray: Array<{ interestRate: number; startMonth: number }>,\r\n  detailed: boolean = false\r\n): {\r\n  error?: string;\r\n  months?: number;\r\n  overpayment?: number;\r\n} {\r\n  let i = 0;\r\n  let overpayment = 0;\r\n  let descendPercArray = percentageArray.sort(\r\n    (a, b) => b.startMonth - a.startMonth\r\n  );\r\n  const maxyrs = 200;\r\n\r\n  function getYearPercent(month: number) {\r\n    let index = descendPercArray\r\n      .map((el) => el.startMonth)\r\n      .findIndex((el) => el < month + 1);\r\n    return descendPercArray[index].interestRate;\r\n  }\r\n\r\n  function rec(sum: number) {\r\n    if (sum > 0) {\r\n      i++;\r\n      let yearPercent = getYearPercent(i);\r\n      let percentPayment = (sum * yearPercent) / 12 / 100;\r\n      overpayment += percentPayment;\r\n\r\n      if (detailed) {\r\n        console.groupCollapsed(`month ${i}`);\r\n        console.log(\"year percent:\", yearPercent);\r\n        console.log(\"percentPayment:\", percentPayment);\r\n        console.log(\"sum left:\", sum);\r\n        console.groupEnd();\r\n      }\r\n\r\n      if (i < maxyrs * 12) {\r\n        rec(sum + percentPayment - moPayment);\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n  }\r\n  rec(sum);\r\n\r\n  return i > maxyrs * 12\r\n    ? { error: \"stack overflow\" }\r\n    : {\r\n        months: i,\r\n        overpayment,\r\n      };\r\n}\r\n","export function calculateFromTerm(\r\n  sum: number,\r\n  yearInterest: number,\r\n  periods: number\r\n): number {\r\n  const i = yearInterest / 12 / 100;\r\n  const n = periods;\r\n  const coefficient = (i * (1 + i) ** n) / ((i + 1) ** n - 1);\r\n\r\n  return yearInterest ? coefficient * sum : sum / periods;\r\n}\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\n\r\nimport { Main } from \"./containers\";\r\n\r\nfunction App() {\r\n  return <Main />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}